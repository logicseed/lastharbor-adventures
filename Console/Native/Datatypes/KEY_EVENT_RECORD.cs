// Copyright © 2018 Marc King <marc@marc.software> - All Rights Reserved
//
// SPDX-License-Identifier: MIT
//
// This work is licensed under the terms of the MIT license. See <LICENSE.md> for more information.

using System;
using System.Runtime.InteropServices;

namespace LastHarbor.Console.Native.Datatypes
{
    /// <summary>
    /// Describes a keyboard input event in a console INPUT_RECORD structure.
    /// </summary>
    /// <remarks>
    /// Enhanced keys for the IBM® 101- and 102-key keyboards are the INS, DEL, HOME, END, PAGE UP,
    /// PAGE DOWN, and direction keys in the clusters to the left of the keypad; and the divide (/)
    /// and ENTER keys in the keypad.
    ///
    /// Keyboard input events are generated when any key, including control keys, is pressed or
    /// released. However, the ALT key when pressed and released without combining with another
    /// character, has special meaning to the system and is not passed through to the application.
    /// Also, the CTRL+C key combination is not passed through if the input handle is in processed
    /// mode (ENABLE_PROCESSED_INPUT).
    /// </remarks>
    /// <example>
    /// For an example, see Reading Input Buffer Events.
    /// https://docs.microsoft.com/en-us/windows/console/reading-input-buffer-events
    /// </example>
    [StructLayout(LayoutKind.Sequential)]
    internal struct KEY_EVENT_RECORD
    {
        /// <summary>
        /// If the key is pressed, this member is <c>TRUE</c>. Otherwise, this member is <c>FALSE</c>
        /// (the key is released).
        /// </summary>
        [MarshalAs(UnmanagedType.Bool)]
        public Boolean KeyDown;

        /// <summary>
        /// The repeat count, which indicates that a key is being held down. For example, when a key
        /// is held down, you might get five events with this member equal to 1, one event with this
        /// member equal to 5, or multiple events with this member greater than or equal to 1.
        /// </summary>
        public Int16 RepeatCount;

        /// <summary>
        /// A virtual-key code that identifies the given key in a device-independent manner.
        /// </summary>
        [MarshalAs(UnmanagedType.I2)]
        public VIRTUAL_KEY_CODE VirtualKeyCode;

        /// <summary>
        /// The virtual scan code of the given key that represents the device-dependent value
        /// generated by the keyboard hardware.
        /// </summary>
        public Int16 VirtualScanCode;

        /// <summary>
        /// A union of a Unicode character and ASCII character.
        /// </summary>
        public CHAR_UNION Char;

        /// <summary>
        /// The state of the control keys.
        /// </summary>
        [MarshalAs(UnmanagedType.I4)]
        public CONTROL_KEY_STATE ControlKeyState;
    }
}
